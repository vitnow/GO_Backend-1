/*
 * OpenAPI спецификация Зоомагазина
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.Pat;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PatApi {
    private ApiClient localVarApiClient;

    public PatApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PatApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createPat
     * @param pat  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подтверждение успешного сохранения </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректные входные данные. Возвращает список атрибутов с ошибками </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPatCall(Pat pat, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pat;

        // create path and map variables
        String localVarPath = "/Pats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPatValidateBeforeCall(Pat pat, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pat' is set
        if (pat == null) {
            throw new ApiException("Missing the required parameter 'pat' when calling createPat(Async)");
        }
        

        okhttp3.Call localVarCall = createPatCall(pat, _callback);
        return localVarCall;

    }

    /**
     * Метод добавления нового питомца в каталог
     * Метод предназначен для сохранения в БД данных по новому питомцу.
     * @param pat  (required)
     * @return Pat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подтверждение успешного сохранения </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректные входные данные. Возвращает список атрибутов с ошибками </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public Pat createPat(Pat pat) throws ApiException {
        ApiResponse<Pat> localVarResp = createPatWithHttpInfo(pat);
        return localVarResp.getData();
    }

    /**
     * Метод добавления нового питомца в каталог
     * Метод предназначен для сохранения в БД данных по новому питомцу.
     * @param pat  (required)
     * @return ApiResponse&lt;Pat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подтверждение успешного сохранения </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректные входные данные. Возвращает список атрибутов с ошибками </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pat> createPatWithHttpInfo(Pat pat) throws ApiException {
        okhttp3.Call localVarCall = createPatValidateBeforeCall(pat, null);
        Type localVarReturnType = new TypeToken<Pat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Метод добавления нового питомца в каталог (asynchronously)
     * Метод предназначен для сохранения в БД данных по новому питомцу.
     * @param pat  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подтверждение успешного сохранения </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректные входные данные. Возвращает список атрибутов с ошибками </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPatAsync(Pat pat, final ApiCallback<Pat> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPatValidateBeforeCall(pat, _callback);
        Type localVarReturnType = new TypeToken<Pat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePatById
     * @param id Идентификатор питомца (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное удаление </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePatByIdCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pats/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePatByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePatById(Async)");
        }
        

        okhttp3.Call localVarCall = deletePatByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Метод удаления игрушки по идентификатору
     * 
     * @param id Идентификатор питомца (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное удаление </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public void deletePatById(String id) throws ApiException {
        deletePatByIdWithHttpInfo(id);
    }

    /**
     * Метод удаления игрушки по идентификатору
     * 
     * @param id Идентификатор питомца (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное удаление </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePatByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deletePatByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Метод удаления игрушки по идентификатору (asynchronously)
     * 
     * @param id Идентификатор питомца (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное удаление </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePatByIdAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePatByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPatByStatus
     * @param status Статус (состояние) питомца (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Питомец </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPatByStatusCall(String status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pats/status/{status}"
            .replaceAll("\\{" + "status" + "\\}", localVarApiClient.escapeString(status.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPatByStatusValidateBeforeCall(String status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling getPatByStatus(Async)");
        }
        

        okhttp3.Call localVarCall = getPatByStatusCall(status, _callback);
        return localVarCall;

    }

    /**
     * Метод получения питомца по состоянию
     * 
     * @param status Статус (состояние) питомца (required)
     * @return Pat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Питомец </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public Pat getPatByStatus(String status) throws ApiException {
        ApiResponse<Pat> localVarResp = getPatByStatusWithHttpInfo(status);
        return localVarResp.getData();
    }

    /**
     * Метод получения питомца по состоянию
     * 
     * @param status Статус (состояние) питомца (required)
     * @return ApiResponse&lt;Pat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Питомец </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pat> getPatByStatusWithHttpInfo(String status) throws ApiException {
        okhttp3.Call localVarCall = getPatByStatusValidateBeforeCall(status, null);
        Type localVarReturnType = new TypeToken<Pat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Метод получения питомца по состоянию (asynchronously)
     * 
     * @param status Статус (состояние) питомца (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Питомец </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPatByStatusAsync(String status, final ApiCallback<Pat> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPatByStatusValidateBeforeCall(status, _callback);
        Type localVarReturnType = new TypeToken<Pat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPats
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список питомцев </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPatsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Pats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPatsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getPatsCall(_callback);
        return localVarCall;

    }

    /**
     * Метод получения питомца
     * Метод предназначен для получения списка всех питомцев, сохраненных в БД.
     * @return List&lt;Pat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список питомцев </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public List<Pat> getPats() throws ApiException {
        ApiResponse<List<Pat>> localVarResp = getPatsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Метод получения питомца
     * Метод предназначен для получения списка всех питомцев, сохраненных в БД.
     * @return ApiResponse&lt;List&lt;Pat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список питомцев </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Pat>> getPatsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPatsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Pat>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Метод получения питомца (asynchronously)
     * Метод предназначен для получения списка всех питомцев, сохраненных в БД.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список питомцев </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPatsAsync(final ApiCallback<List<Pat>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPatsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Pat>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayById
     * @param id Идентификатор питомца (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Питомец </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayByIdCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pats/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPayById(Async)");
        }
        

        okhttp3.Call localVarCall = getPayByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Метод получения питомца по идентификатору
     * 
     * @param id Идентификатор питомца (required)
     * @return Pat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Питомец </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public Pat getPayById(String id) throws ApiException {
        ApiResponse<Pat> localVarResp = getPayByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Метод получения питомца по идентификатору
     * 
     * @param id Идентификатор питомца (required)
     * @return ApiResponse&lt;Pat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Питомец </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pat> getPayByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getPayByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Pat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Метод получения питомца по идентификатору (asynchronously)
     * 
     * @param id Идентификатор питомца (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Питомец </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayByIdAsync(String id, final ApiCallback<Pat> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Pat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePat
     * @param id Идентификатор питомца (required)
     * @param pat  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подтверждение успешного обновления </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректные входные данные. Возвращает список атрибутов с ошибками </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePatCall(String id, Pat pat, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pat;

        // create path and map variables
        String localVarPath = "/pats/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePatValidateBeforeCall(String id, Pat pat, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePat(Async)");
        }
        
        // verify the required parameter 'pat' is set
        if (pat == null) {
            throw new ApiException("Missing the required parameter 'pat' when calling updatePat(Async)");
        }
        

        okhttp3.Call localVarCall = updatePatCall(id, pat, _callback);
        return localVarCall;

    }

    /**
     * Метод обновления питомца в каталоге
     * Метод предназначен для обновления в БД данных по имеющейся питомце.
     * @param id Идентификатор питомца (required)
     * @param pat  (required)
     * @return Pat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подтверждение успешного обновления </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректные входные данные. Возвращает список атрибутов с ошибками </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public Pat updatePat(String id, Pat pat) throws ApiException {
        ApiResponse<Pat> localVarResp = updatePatWithHttpInfo(id, pat);
        return localVarResp.getData();
    }

    /**
     * Метод обновления питомца в каталоге
     * Метод предназначен для обновления в БД данных по имеющейся питомце.
     * @param id Идентификатор питомца (required)
     * @param pat  (required)
     * @return ApiResponse&lt;Pat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подтверждение успешного обновления </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректные входные данные. Возвращает список атрибутов с ошибками </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pat> updatePatWithHttpInfo(String id, Pat pat) throws ApiException {
        okhttp3.Call localVarCall = updatePatValidateBeforeCall(id, pat, null);
        Type localVarReturnType = new TypeToken<Pat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Метод обновления питомца в каталоге (asynchronously)
     * Метод предназначен для обновления в БД данных по имеющейся питомце.
     * @param id Идентификатор питомца (required)
     * @param pat  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Подтверждение успешного обновления </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректные входные данные. Возвращает список атрибутов с ошибками </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Любая неожиданная ошибка </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePatAsync(String id, Pat pat, final ApiCallback<Pat> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePatValidateBeforeCall(id, pat, _callback);
        Type localVarReturnType = new TypeToken<Pat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
