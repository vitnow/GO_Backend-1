/*
 * OpenAPI спецификация Зоомагазина
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Pat;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PatApi
 */
@Ignore
public class PatApiTest {

    private final PatApi api = new PatApi();

    
    /**
     * Метод добавления нового питомца в каталог
     *
     * Метод предназначен для сохранения в БД данных по новому питомцу.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPatTest() throws ApiException {
        Pat pat = null;
        Pat response = api.createPat(pat);

        // TODO: test validations
    }
    
    /**
     * Метод удаления игрушки по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePatByIdTest() throws ApiException {
        String id = null;
        api.deletePatById(id);

        // TODO: test validations
    }
    
    /**
     * Метод получения питомца по состоянию
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPatByStatusTest() throws ApiException {
        String status = null;
        Pat response = api.getPatByStatus(status);

        // TODO: test validations
    }
    
    /**
     * Метод получения питомца
     *
     * Метод предназначен для получения списка всех питомцев, сохраненных в БД.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPatsTest() throws ApiException {
        List<Pat> response = api.getPats();

        // TODO: test validations
    }
    
    /**
     * Метод получения питомца по идентификатору
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPayByIdTest() throws ApiException {
        String id = null;
        Pat response = api.getPayById(id);

        // TODO: test validations
    }
    
    /**
     * Метод обновления питомца в каталоге
     *
     * Метод предназначен для обновления в БД данных по имеющейся питомце.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePatTest() throws ApiException {
        String id = null;
        Pat pat = null;
        Pat response = api.updatePat(id, pat);

        // TODO: test validations
    }
    
}
